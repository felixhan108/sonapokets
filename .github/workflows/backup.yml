name: Deploy sonapokets # 워크플로우의 이름 설정

on:
  push: # push 이벤트 발생 시
    branches: [master] # master 브랜치에 푸시할 때 트리거
  pull_request: # pull request 이벤트 발생 시
    types: [opened, synchronize, reopened] # PR이 생성, 업데이트, 재개될 때 트리거
    branches: [master] # master 브랜치를 대상으로 하는 PR일 때
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있도록 설정

jobs:
  detect-changes: # 변경 감지 작업 추가
    runs-on: ubuntu-latest
    outputs: # 다른 작업에서 사용할 수 있도록 출력 정의
      deploy_frontend: ${{ steps.filter.outputs.frontend }}
      deploy_backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend: # 'frontend'라는 이름의 필터 정의
              - 'frontend/**' # frontend 디렉토리 또는 하위 파일 변경 시 true
            backend:  # 'backend'라는 이름의 필터 정의
              - 'backend/**'  # backend 디렉토리 또는 하위 파일 변경 시 true
            # 필요하다면 nginx 설정 변경 감지 등 추가 가능
            # nginx_config:
            #  - 'nginx/**'

  deploy: # 배포 작업 정의
    needs: detect-changes # detect-changes 작업 이후에 실행
    runs-on: ubuntu-latest # Ubuntu 최신 버전에서 실행
    steps:
      - name: Set up SSH # SSH 설정 단계
        uses: webfactory/ssh-agent@v0.5.4 # SSH 에이전트 설정
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # 비밀 키를 사용하여 SSH 인증

      - name: Add host key to known_hosts # SSH 호스트 키를 known_hosts에 추가
        run: |
          mkdir -p ~/.ssh  # .ssh 디렉토리 생성
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts  # 서버의 호스트 키를 known_hosts에 추가

      - name: Determine Deploy Args # 배포 스크립트에 전달할 인자 결정
        id: deploy-args
        run: |
          args=""
          # detect-changes 작업의 출력값을 확인하여 인자 구성
          if [[ "${{ needs.detect-changes.outputs.deploy_frontend }}" == "true" ]]; then
            args="$args --frontend" # frontend 변경 시 --frontend 인자 추가
          fi
          if [[ "${{ needs.detect-changes.outputs.deploy_backend }}" == "true" ]]; then
            args="$args --backend"  # backend 변경 시 --backend 인자 추가
          fi

          # 수동 실행(workflow_dispatch)이거나, 자동 실행인데 frontend/backend 변경이 없으면 --all 추가 (전체 배포)
          # (이 로직은 원하는 정책에 따라 변경 가능)
          if [[ "$args" == "" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
             echo "No specific frontend/backend changes detected in automated run. Triggering full deploy."
             args="--all"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
             echo "Manual trigger. Triggering full deploy."
             args="--all"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT # 결정된 인자를 다음 스텝에서 사용할 수 있도록 출력

      - name: Deploy to server # 서버에 배포하는 단계
        run: |
          # SSH 명령에 결정된 인자(${steps.deploy-args.outputs.args})를 포함하여 실행
          ssh ${{ secrets.USER_NAME }}@${{ secrets.SERVER_IP }} "cd ~/github/sonapokets && git pull && chmod +x ./scripts/deploy.sh && ./scripts/deploy.sh ${{ steps.deploy-args.outputs.args }}"
