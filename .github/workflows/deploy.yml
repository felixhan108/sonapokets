name: Deploy sonapokets # 워크플로우의 이름 설정

on:
  push: # push 이벤트 발생 시
    branches: [master] # master 브랜치에 푸시할 때 트리거
  pull_request: # pull request 이벤트 발생 시
    # opened: PR이 새로 생성될 때
    # synchronize: PR에 새로운 커밋이 추가될 때
    # reopened: 닫혔던 PR이 다시 열릴 때
    types: [opened, synchronize, reopened] # PR이 생성, 업데이트, 재개될 때 트리거
    branches: [master] # master 브랜치를 대상으로 하는 PR일 때
  workflow_dispatch: # 수동으로 워크플로우를 실행할 수 있도록 설정

jobs:
  deploy: # 배포 작업 정의
    runs-on: ubuntu-latest # Ubuntu 최신 버전에서 실행
    # master 브랜치로의 직접 push 또는 master 브랜치를 대상으로 하는 PR인 경우에만 실행
    if: github.event_name == 'push' || github.event.pull_request.base.ref == 'master'
    steps:
      - uses: actions/checkout@v3 # 코드 리포지토리에서 소스 코드 체크아웃

      - name: Set up SSH # SSH 설정 단계
        uses: webfactory/ssh-agent@v0.5.4 # SSH 에이전트 설정
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # 비밀 키를 사용하여 SSH 인증

      - name: Add host key to known_hosts # SSH 호스트 키를 known_hosts에 추가
        run: |
          mkdir -p ~/.ssh  # .ssh 디렉토리 생성
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts  # 서버의 호스트 키를 known_hosts에 추가

      - name: Deploy to server # 서버에 배포하는 단계
        run: |
          ssh ${{ secrets.USER_NAME }}@${{ secrets.SERVER_IP }} "cd ~/github/sonapokets && git pull && chmod +x ./scripts/deploy.sh && ./scripts/deploy.sh"
          # SSH를 통해 서버에 접속하여:
          # 1. 지정된 디렉토리로 이동
          # 2. 최신 코드를 가져오기 위해 git pull 실행
          # 3. 배포 스크립트에 실행 권한 부여
          # 4. 배포 스크립트 실행
